// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String         @id // Clerk user ID
  email           String         @unique
  firstName       String?
  lastName        String?
  imageUrl        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  username        String?        @unique
  externalId      String?        @unique
  validations     Validation[]
  credits         Credit?
  payments        Payment[]
  notifications   Notification[]
  publicMetadata  Json?
  privateMetadata Json?
}

model Validation {
  id           String             @id @default(uuid())
  userId       String
  title        String
  description  String             @db.Text
  category     String
  filePath     String?
  status       ValidationStatus   @default(IN_PROGRESS)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  result       ValidationResult?
  apiCalls     ApiCall[]
  user         User               @relation(fields: [userId], references: [id])
  metrics      ValidationMetrics?
  marketTrends MarketTrend[]

  @@index([userId])
}

model ValidationResult {
  id                  String     @id @default(uuid())
  validationId        String     @unique
  viralityScore       Float
  uniquenessScore     Float
  problemSolvingScore Float
  overallScore        Float
  insights            Json
  suggestions         String     @db.Text
  urgency             Boolean    @default(false)
  createdAt           DateTime   @default(now())
  validation          Validation @relation(fields: [validationId], references: [id])

  @@index([validationId])
}

model Credit {
  id             String   @id @default(uuid())
  userId         String   @unique
  totalCredits   Int      @default(0)
  usedCredits    Int      @default(0)
  lastRefillDate DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  paymentMethod PaymentMethod
  amount        Float
  creditsAdded  Int
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  user          User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  type      NotificationType
  content   String             @db.Text
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  sentAt    DateTime?
  user      User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ApiCall {
  id           String     @id @default(uuid())
  validationId String
  apiName      String
  endpoint     String
  responseData Json
  createdAt    DateTime   @default(now())
  validation   Validation @relation(fields: [validationId], references: [id])

  @@index([validationId])
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ValidationStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum PaymentMethod {
  STRIPE
  LEMON_SQUEEZY
}

enum NotificationType {
  MOTIVATIONAL
  NEW_INSIGHTS
  VALIDATION_COMPLETE
  CREDIT_LOW
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model ValidationMetrics {
  id                 String               @id @default(uuid())
  validationId       String               @unique
  validation         Validation           @relation(fields: [validationId], references: [id])
  marketSize         Float // For market distribution chart
  targetAudience     Float
  competitorCount    Int
  growthPotential    Float
  marketTrends       Json // Store trend data points
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  competitorAnalysis CompetitorAnalysis[]

  @@index([validationId])
}

model CompetitorAnalysis {
  id                String            @id @default(uuid())
  metricsId         String
  validationMetrics ValidationMetrics @relation(fields: [metricsId], references: [id])
  competitorName    String
  marketShare       Float
  strengthScore     Float
  weaknessScore     Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([metricsId])
}

model MarketTrend {
  id           String     @id @default(uuid())
  validationId String
  validation   Validation @relation(fields: [validationId], references: [id])
  date         DateTime
  trendValue   Float
  category     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([validationId])
}
